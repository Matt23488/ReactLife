{"version":3,"sources":["Life/api.ts","Life/AbrashLife.ts","Life/LifeView.ts","Life/Patterns.ts","LifeComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LifeRect","cornerOrX","widthOrY","heightOrWidth","height","corner","width","this","x","y","Cell","cell","_cell","_statem","_countm","_state","AbrashLife","_width","_height","_cells","clear","increment","makeAlive","decrement","makeDead","isValidPoint","state","value","becomeAlive","becomeDead","prev","map","inner","val","count","allDead","rect","setPixel","xmin","Math","max","xmax","min","ymin","ymax","aliveColor","LifeView","canvas","_doLoop","_canvas","_maxScale","_minScale","_scale","_gridScale","_corner","_life","_prevTime","_dragging","_dragStart","document","getElementById","lifeHeight","life","set","patterns","window","addEventListener","onWindowResize","bind","onScroll","onKeyDown","onMouseDown","onMouseMove","onMouseUp","start","requestAnimationFrame","loop","innerWidth","innerHeight","ev","key","screenshot","stop","v","bitmapToLife","deltaY","zoomIn","zoomOut","clientX","clientY","current","drawDisplay","time","deltaTime","step","draw","ctx","fillStyle","fillRect","clearDisplay","drawBlocks","drawPixels","gridEnabled","strokeStyle","beginPath","i","moveTo","lineTo","closePath","stroke","lifeRect","p","lifeToBitmap","isValidBitmapPoint","drawGrid","data","getImageData","rgb","color","withoutHash","slice","arr","length","push","Number","charAt","repeat","hexStringToArr","putImageData","url","toDataURL","replace","downloadLink","createElement","setAttribute","click","floor","getContext","l","scaleUp","lifeWidth","scaleDown","LifeComponent","lifeData","setState","className","id","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.5a5304c1.chunk.js","sourcesContent":["export interface Life {\r\n    clear: () => void;\r\n    get: (x: number, y: number) => boolean;\r\n    set: (x: number, y: number, alive: boolean) => void;\r\n    draw: (rect: LifeRect, setPixel: (v: LifePoint) => void) => void;\r\n    step: () => void;\r\n}\r\n\r\nexport interface Point {\r\n    readonly x: number;\r\n    readonly y: number;\r\n}\r\n\r\nexport type LifePoint = Point;\r\n\r\nexport class LifeRect {\r\n    public readonly corner: LifePoint;\r\n    public readonly width: number;\r\n    public readonly height: number;\r\n\r\n    public constructor(corner: LifePoint, width: number, height: number)\r\n    public constructor(x: number, y: number, width: number, height: number)\r\n    public constructor(cornerOrX: LifePoint | number, widthOrY: number, heightOrWidth: number, height?: number) {\r\n        if (typeof cornerOrX === 'number') {\r\n            this.corner = { x: cornerOrX, y: widthOrY };\r\n            this.width = heightOrWidth;\r\n            this.height = height!;\r\n        } else {\r\n            this.corner = cornerOrX;\r\n            this.width = widthOrY;\r\n            this.height = heightOrWidth;\r\n        }\r\n    }\r\n\r\n    public get x() { return this.corner.x; }\r\n    public get y() { return this.corner.y; }\r\n}","import { Life, LifePoint, LifeRect } from './api';\r\n\r\nclass Cell {\r\n    private readonly _cell: number;\r\n    public constructor(cell: number) {\r\n        this._cell = cell;\r\n    }\r\n\r\n    private static readonly _state = 4;\r\n    private static readonly _statem = 1 << Cell._state;\r\n    private static readonly _countm = 0x0f;\r\n\r\n    public get state() { return (this._cell & Cell._statem) !== 0; }\r\n    public get count() { return this._cell & Cell._countm; }\r\n\r\n    public get allDead() { return this._cell === 0; }\r\n\r\n    public makeAlive() { return new Cell(this._cell | Cell._statem); }\r\n    public makeDead() { return new Cell(this._cell & ~Cell._statem); }\r\n\r\n    public increment() {\r\n        return new Cell(this._cell + 1);\r\n    }\r\n\r\n    public decrement() {\r\n        return new Cell(this._cell - 1);\r\n    }\r\n\r\n    public clone() { return new Cell(this._cell); }\r\n}\r\n\r\nexport default class AbrashLife implements Life {\r\n    private readonly _width = 258;\r\n    private readonly _height = 258;\r\n    private _cells: Cell[][] = [];\r\n\r\n    public constructor() { this.clear(); }\r\n\r\n    public clear() {\r\n        this._cells = [];\r\n        for (let x = 0; x < this._width; x++) {\r\n            this._cells[x] = [];\r\n            for (let y = 0; y < this._height; y++) this._cells[x][y] = new Cell(0);\r\n        }\r\n    }\r\n    private isValidPoint(x: number, y: number) { return 0 < x && x < this._width - 1 && 0 < y && y < this._height - 1; }\r\n\r\n    private becomeAlive(x: number, y: number) {\r\n        this._cells[x - 1][y - 1] = this._cells[x - 1][y - 1].increment();\r\n        this._cells[x - 1][y + 0] = this._cells[x - 1][y + 0].increment();\r\n        this._cells[x - 1][y + 1] = this._cells[x - 1][y + 1].increment();\r\n        this._cells[x + 0][y - 1] = this._cells[x + 0][y - 1].increment();\r\n        this._cells[x + 0][y + 0] = this._cells[x + 0][y + 0].makeAlive();\r\n        this._cells[x + 0][y + 1] = this._cells[x + 0][y + 1].increment();\r\n        this._cells[x + 1][y - 1] = this._cells[x + 1][y - 1].increment();\r\n        this._cells[x + 1][y + 0] = this._cells[x + 1][y + 0].increment();\r\n        this._cells[x + 1][y + 1] = this._cells[x + 1][y + 1].increment();\r\n    }\r\n\r\n    private becomeDead(x: number, y: number) {\r\n        this._cells[x - 1][y - 1] = this._cells[x - 1][y - 1].decrement();\r\n        this._cells[x - 1][y + 0] = this._cells[x - 1][y + 0].decrement();\r\n        this._cells[x - 1][y + 1] = this._cells[x - 1][y + 1].decrement();\r\n        this._cells[x + 0][y - 1] = this._cells[x + 0][y - 1].decrement();\r\n        this._cells[x + 0][y + 0] = this._cells[x + 0][y + 0].makeDead();\r\n        this._cells[x + 0][y + 1] = this._cells[x + 0][y + 1].decrement();\r\n        this._cells[x + 1][y - 1] = this._cells[x + 1][y - 1].decrement();\r\n        this._cells[x + 1][y + 0] = this._cells[x + 1][y + 0].decrement();\r\n        this._cells[x + 1][y + 1] = this._cells[x + 1][y + 1].decrement();\r\n    }\r\n\r\n    public get(x: number, y: number) {\r\n        if (this.isValidPoint(x, y)) return this._cells[x][y].state;\r\n        else return false;\r\n    }\r\n\r\n    public set(x: number, y: number, value: boolean) {\r\n        if (!this.isValidPoint(x, y)) return;\r\n        const c = this._cells[x][y];\r\n\r\n        if (c.state === value) return;\r\n        if (value) this.becomeAlive(x, y);\r\n        else this.becomeDead(x, y);\r\n    }\r\n\r\n    public step() {\r\n        const prev = this._cells.map(inner => inner.map(val => ({ state: val.state, count: val.count, allDead: val.allDead })));\r\n        for (let y = 1; y < this._height - 1; y++) {\r\n            for (let x = 1; x < this._width - 1; x++) {\r\n                const cell = prev[x][y];\r\n                if (cell.allDead) continue;\r\n\r\n                const count = cell.count;\r\n                if (cell.state) {\r\n                    if (count !== 2 && count !== 3) this.becomeDead(x, y);\r\n                } else if (count === 3) this.becomeAlive(x, y);\r\n            }\r\n        }\r\n    }\r\n\r\n    public draw(rect: LifeRect, setPixel: (v: LifePoint) => void) {\r\n        const xmin = Math.max(1, rect.x);\r\n        const xmax = Math.min(this._width - 1, rect.x + rect.width);\r\n        const ymin = Math.max(1, rect.y - rect.height + 1);\r\n        const ymax = Math.min(this._height - 1, rect.y + 1);\r\n        for (let y = ymin; y < ymax; y++) for (let x = xmin; x < xmax; x++) if (this._cells[x][y].state) setPixel({ x, y });\r\n    }\r\n}","import { LifePoint, Life, LifeRect, Point } from './api';\r\n// import BoolArrayLife from './BoolArrayLife';\r\n// import ScholesLife from './ScholesLife';\r\nimport AbrashLife from './AbrashLife';\r\nimport * as patterns from './Patterns';\r\n\r\nconst deadColor = '#333';\r\nconst aliveColor = '#909';\r\nconst gridColor = '#000';\r\nconst ticksPerSecond = 1000 / 30;\r\n\r\nfunction hexStringToArr(color: string) {\r\n    const withoutHash = color.slice(1);\r\n    const arr: number[] = [];\r\n    if (withoutHash.length === 3) {\r\n        for (let i = 0; i < 3; i++) arr.push(Number(`0x${withoutHash.charAt(i).repeat(2)}`));\r\n    } else {\r\n        for (let i = 0; i < 6; i += 2) arr.push(Number(`0x${withoutHash.slice(i, i + 2)}`));\r\n    }\r\n    return arr;\r\n}\r\n\r\nexport default class LifeView {\r\n    // private _loopHandle: number | undefined;\r\n    private _doLoop = true;\r\n    private readonly _canvas: HTMLCanvasElement;\r\n    private readonly _maxScale = 0;\r\n    private readonly _minScale = -6;\r\n    private _scale: number;\r\n    private readonly _gridScale: number;\r\n    private _corner: LifePoint;\r\n    private readonly _life: Life;\r\n    private _prevTime = 0;\r\n\r\n    public constructor(canvas: string) {\r\n        this._canvas = document.getElementById(canvas) as HTMLCanvasElement;\r\n        this._scale = -1;\r\n        this._gridScale = -3;\r\n        this._corner = { x: -2, y: this.lifeHeight - 2 };\r\n        this._life = new AbrashLife();\r\n        patterns.addR(this._life, { x: 128, y: 128 });\r\n        // this._life = new BoolArrayLife();\r\n        // patterns.addBlinker(this._life, { x: 5, y: 5 });\r\n        // patterns.addAcorn(this._life, { x: 128, y: 128 });\r\n        // patterns.addAcorn(this._life, { x: 5, y: 5 });\r\n        window.addEventListener('resize', this.onWindowResize.bind(this));\r\n        this._canvas.addEventListener('wheel', this.onScroll.bind(this));\r\n        window.addEventListener('keydown', this.onKeyDown.bind(this));\r\n        this._canvas.addEventListener('mousedown', this.onMouseDown.bind(this));\r\n        this._canvas.addEventListener('mousemove', this.onMouseMove.bind(this));\r\n        this._canvas.addEventListener('mouseup', this.onMouseUp.bind(this));\r\n        this.onWindowResize();\r\n        this.start();\r\n    }\r\n\r\n    public start() {\r\n        this._doLoop = true;\r\n        window.requestAnimationFrame(this.loop.bind(this));\r\n    }\r\n\r\n    public stop() {\r\n        this._doLoop = false;\r\n    }\r\n\r\n    private onWindowResize() {\r\n        // this._canvas.width = this._canvas.height = Math.floor(Math.min(window.innerWidth, window.innerHeight) * 0.9);\r\n        this._canvas.width = window.innerWidth;\r\n        this._canvas.height = window.innerHeight;\r\n        this._corner = { x: -2, y: this.lifeHeight - 2 };\r\n    }\r\n\r\n    private onKeyDown(ev: KeyboardEvent) {\r\n        switch (ev.key) {\r\n            case 's':\r\n                this.screenshot();\r\n                break;\r\n            case ' ':\r\n                if (this._doLoop) this.stop();\r\n                else this.start();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private onScroll(ev: WheelEvent) {\r\n        const v = this.bitmapToLife(ev);\r\n        if (ev.deltaY < 0) this.zoomIn(v);\r\n        else if (ev.deltaY > 0) this.zoomOut(v);\r\n    }\r\n\r\n    private _dragging = false;\r\n    private _dragStart: LifePoint = { x: -1, y: -1 };\r\n    private onMouseDown(ev: MouseEvent) {\r\n        this._dragging = true;\r\n        this._dragStart = this.bitmapToLife({ x: ev.clientX, y: ev.clientY });\r\n    }\r\n\r\n    private onMouseMove(ev: MouseEvent) {\r\n        if (!this._dragging) return;\r\n\r\n        const current = this.bitmapToLife({ x: ev.clientX, y: ev.clientY });\r\n        this._corner = { x: this._corner.x + this._dragStart.x - current.x, y: this._corner.y + this._dragStart.y - current.y };\r\n        this.drawDisplay();\r\n    }\r\n\r\n    private onMouseUp(ev: MouseEvent) {\r\n        this._dragging = false;\r\n    }\r\n\r\n    private loop(time: number) {\r\n        const deltaTime = time - this._prevTime;\r\n        this._life.step();\r\n        if (deltaTime >= 1000 / ticksPerSecond) {\r\n            this.draw();\r\n            this._prevTime = time;\r\n        }\r\n        if (this._doLoop) window.requestAnimationFrame(this.loop.bind(this));\r\n    }\r\n\r\n    private draw() {\r\n        this.drawDisplay();\r\n    }\r\n\r\n    private clearDisplay() {\r\n        const { ctx, width, height } = this;\r\n        ctx.fillStyle = deadColor;\r\n        ctx.fillRect(0, 0, width, height);\r\n    }\r\n\r\n    private drawDisplay() {\r\n        this.clearDisplay();\r\n        if (this._scale < 0) this.drawBlocks();\r\n        else this.drawPixels();\r\n    }\r\n\r\n    private drawGrid() {\r\n        if (!this.gridEnabled) return;\r\n\r\n        const { ctx, width, height } = this;\r\n        ctx.strokeStyle = gridColor;\r\n        ctx.beginPath();\r\n\r\n        for (let i = 0; i < width; i += 1 << -this._scale) {\r\n            ctx.moveTo(i, 0);\r\n            ctx.lineTo(i, height - 1);\r\n        }\r\n        for (let i = 0; i < height; i += 1 << -this._scale) {\r\n            ctx.moveTo(0, i);\r\n            ctx.lineTo(width - 1, i);\r\n        }\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n    }\r\n\r\n    private drawBlocks() {\r\n        const { ctx } = this;\r\n        ctx.fillStyle = aliveColor;\r\n        const drawBlock = (v: LifePoint) => {\r\n            const p = this.lifeToBitmap(v);\r\n            if (this.isValidBitmapPoint(p)) ctx.fillRect(p.x, p.y, 1 << -this._scale, 1 << -this._scale);\r\n        };\r\n        this._life.draw(this.lifeRect, drawBlock);\r\n        this.drawGrid();\r\n    }\r\n\r\n    private drawPixels() {\r\n        const { ctx, width, height } = this;\r\n        const data = ctx.getImageData(0, 0, width, height);\r\n        const rgb = hexStringToArr(aliveColor);\r\n        const drawPixel = (v: LifePoint) => {\r\n            const p = this.lifeToBitmap(v);\r\n            data.data[p.y * width * 4 + p.x * 4 + 0] = rgb[0];\r\n            data.data[p.y * width * 4 + p.x * 4 + 1] = rgb[1];\r\n            data.data[p.y * width * 4 + p.x * 4 + 2] = rgb[2];\r\n            data.data[p.y * width * 4 + p.x * 4 + 3] = 0xff;\r\n        };\r\n        this._life.draw(this.lifeRect, drawPixel);\r\n        ctx.putImageData(data, 0, 0);\r\n    }\r\n\r\n    private screenshot() {\r\n        const url = this._canvas.toDataURL('image/png').replace(/^data:image\\/[^;]/, 'data:application/octet-stream');\r\n        const downloadLink = document.createElement('a');\r\n        downloadLink.setAttribute('download', 'Life.png');\r\n        downloadLink.setAttribute('href', url);\r\n        downloadLink.click();\r\n    }\r\n\r\n    private zoomOut(v: LifePoint) {\r\n        if (this._scale < this._maxScale) {\r\n            this._corner = { x: 2 * this._corner.x - v.x, y: 2 * this._corner.y - v.y };\r\n            this._scale++;\r\n            this.drawDisplay();\r\n        }\r\n    }\r\n\r\n    private zoomIn(v: LifePoint) {\r\n        if (this._scale > this._minScale) {\r\n            this._corner = { x: Math.floor((this._corner.x + v.x) / 2), y: Math.floor((this._corner.y + v.y) / 2) };\r\n            this._scale--;\r\n            this.drawDisplay();\r\n        }\r\n    }\r\n\r\n    public get canvas() { return this._canvas; }\r\n    public get scale() { return this._scale; }\r\n    public set scale(value: number) { this._scale = value; }\r\n    public get gridScale() { return this._gridScale; }\r\n    public get corner() { return this._corner; }\r\n    public set corner(value: LifePoint) { this._corner = value; }\r\n    public get life() { return this._life; }\r\n    public get ctx() { return this._canvas.getContext('2d')!; }\r\n    public get width() { return this._canvas.width; }\r\n    public get height() { return this._canvas.height; }\r\n\r\n    public scaleUp(v: number) {\r\n        if (this._scale >= 0) return v << this._scale;\r\n        else return v >> -this._scale;\r\n    }\r\n\r\n    public scaleDown(l: number) {\r\n        if (this._scale >= 0) return l >> this._scale;\r\n        else return l << -this._scale;\r\n    }\r\n\r\n    public get lifeWidth() { return this.scaleUp(this._canvas.width); }\r\n    public get lifeHeight() { return this.scaleUp(this._canvas.height); }\r\n    public get lifeRect() { return new LifeRect(this._corner, this.lifeWidth, this.lifeHeight); }\r\n\r\n    public lifeToBitmap(v: LifePoint): Point {\r\n        return {\r\n            x: this.scaleDown(v.x - this._corner.x),\r\n            y: this.scaleDown(this._corner.y - v.y),\r\n        };\r\n    }\r\n\r\n    public bitmapToLife(p: Point): LifePoint {\r\n        return {\r\n            x: this._corner.x + this.scaleUp(p.x),\r\n            y: this._corner.y - this.scaleUp(p.y),\r\n        };\r\n    }\r\n\r\n    public get gridEnabled() { return this._scale <= this._gridScale; }\r\n\r\n    public isValidBitmapPoint(p: Point) {\r\n        return 0 <= p.x && p.x < this._canvas.width && 0 <= p.y && p.y < this._canvas.height;\r\n    }\r\n}","import { Life, LifePoint } from './api';\r\n\r\nexport function addBlinker(life: Life, corner: LifePoint) {\r\n    const { x, y } = corner;\r\n    life.set(x, y, true);\r\n    life.set(x, y - 1, true);\r\n    life.set(x, y - 2, true);\r\n}\r\n\r\nexport function addAcorn(life: Life, corner: LifePoint) {\r\n    const { x, y } = corner;\r\n    life.set(x + 1, y, true);\r\n    life.set(x + 3, y - 1, true);\r\n    life.set(x, y - 2, true);\r\n    life.set(x + 1, y - 2, true);\r\n    life.set(x + 4, y - 2, true);\r\n    life.set(x + 5, y - 2, true);\r\n    life.set(x + 6, y - 2, true);\r\n}\r\n\r\nexport function addR(life: Life, corner: LifePoint) {\r\n    const { x, y } = corner;\r\n    life.set(x + 1, y + 0, true);\r\n    life.set(x + 2, y + 0, true);\r\n    life.set(x + 0, y - 1, true);\r\n    life.set(x + 1, y - 1, true);\r\n    life.set(x + 1, y - 2, true);\r\n}","import React from 'react';\r\nimport LifeView from './Life/LifeView';\r\n\r\nimport './Life.css';\r\n\r\ninterface LifeComponentState {\r\n    lifeData?: LifeView\r\n}\r\n\r\n// https://github.com/ericlippert/ConwaysLife/tree/episode11\r\n// https://ericlippert.com/2020/05/21/life-part-11/\r\nexport class LifeComponent extends React.Component<{}, LifeComponentState> {\r\n\r\n    public componentDidMount() {\r\n        const lifeData = new LifeView('lifeCanvas');\r\n        this.setState({ lifeData });\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        this.state.lifeData?.stop();\r\n    }\r\n\r\n    public render() {\r\n        return <canvas className=\"Life\" id=\"lifeCanvas\" />\r\n    }\r\n}","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport { LifeComponent } from './LifeComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LifeComponent />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}