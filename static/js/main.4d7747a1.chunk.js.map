{"version":3,"sources":["Life/api.ts","Life/ScholesLife.ts","Life/LifeView.ts","Life/Patterns.ts","LifeComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LifeRect","cornerOrX","widthOrY","heightOrWidth","height","corner","width","this","x","y","ByteBlock","bytes","_width","_height","_bytes","Uint8Array","isValid","Error","value","newBytes","length","i","b","bs","some","map","a","ScholesLife","_cells","isValidPoint","get","set","w","moveLeft","e","moveRight","n","moveUp","s","moveDown","nw","ne","sw","se","sum","threes","where","fours","livingFours","and","or","rect","setPixel","xmin","Math","max","xmax","min","ymin","ymax","aliveColor","LifeView","canvas","_doLoop","_canvas","_maxScale","_minScale","_scale","_gridScale","_corner","_life","_prevTime","_dragging","_dragStart","document","getElementById","lifeHeight","life","patterns","window","addEventListener","onWindowResize","bind","onScroll","onKeyDown","onMouseDown","onMouseMove","onMouseUp","start","requestAnimationFrame","loop","innerWidth","innerHeight","ev","key","screenshot","stop","v","bitmapToLife","deltaY","zoomIn","zoomOut","clientX","clientY","current","drawDisplay","time","deltaTime","step","draw","ctx","fillStyle","fillRect","clearDisplay","drawBlocks","drawPixels","gridEnabled","strokeStyle","beginPath","moveTo","lineTo","closePath","stroke","lifeRect","p","lifeToBitmap","isValidBitmapPoint","drawGrid","data","getImageData","rgb","color","withoutHash","slice","arr","push","Number","charAt","repeat","hexStringToArr","putImageData","url","toDataURL","replace","downloadLink","createElement","setAttribute","click","floor","getContext","l","scaleUp","lifeWidth","scaleDown","LifeComponent","lifeData","setState","state","className","id","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"2PAeaA,EAAb,WAOI,WAAmBC,EAA+BC,EAAkBC,EAAuBC,GAAkB,yBAN7FC,YAM4F,OAL5FC,WAK4F,OAJ5FF,YAI4F,EAC/E,kBAAdH,GACPM,KAAKF,OAAS,CAAEG,EAAGP,EAAWQ,EAAGP,GACjCK,KAAKD,MAAQH,EACbI,KAAKH,OAASA,IAEdG,KAAKF,OAASJ,EACdM,KAAKD,MAAQJ,EACbK,KAAKH,OAASD,GAf1B,mCAmBI,WAAiB,OAAOI,KAAKF,OAAOG,IAnBxC,aAoBI,WAAiB,OAAOD,KAAKF,OAAOI,MApBxC,KCbMC,E,WAKF,WAAmBJ,EAAeF,EAAgBO,GAAqB,yBAJtDC,YAIqD,OAHrDC,aAGqD,OAFrDC,YAEqD,EAClEP,KAAKK,OAASN,EACdC,KAAKM,QAAUT,EACfG,KAAKO,OAASH,GAAS,IAAII,WAAWT,EAAQF,G,2CAGlD,SAAgBI,EAAWC,GAAa,OAAO,GAAKD,GAAKA,EAAID,KAAKK,QAAU,GAAKH,GAAKA,EAAIF,KAAKM,U,iBAE/F,SAAWL,EAAWC,GAClB,IAAKF,KAAKS,QAAQR,EAAGC,GAAI,MAAM,IAAIQ,MAAM,iCACzC,OAAOV,KAAKO,OAAOL,EAAIF,KAAKK,OAASJ,K,iBAGzC,SAAWA,EAAWC,EAAWS,GAC7B,IAAKX,KAAKS,QAAQR,EAAGC,GAAI,MAAM,IAAIQ,MAAM,iCACzCV,KAAKO,OAAOL,EAAIF,KAAKK,OAASJ,GAAKU,I,sBAGvC,WAEI,IADA,IAAMC,EAAW,IAAIJ,WAAWR,KAAKO,OAAOM,QACnCC,EAAI,EAAGA,EAAIF,EAASC,OAAQC,IAAKF,EAASE,EAAI,GAAKd,KAAKO,OAAOO,GACxE,IAAK,IAAIA,EAAId,KAAKK,OAAS,EAAGS,EAAIF,EAASC,OAAQC,GAAKd,KAAKK,OAAQO,EAASE,GAAK,EACnF,OAAO,IAAIX,EAAUH,KAAKK,OAAQL,KAAKM,QAASM,K,uBAGpD,WAEI,IADA,IAAMA,EAAW,IAAIJ,WAAWR,KAAKO,OAAOM,QACnCC,EAAI,EAAGA,EAAIF,EAASC,OAAQC,IAAKF,EAASE,GAAKd,KAAKO,OAAOO,EAAI,GACxE,IAAK,IAAIA,EAAId,KAAKK,OAAQS,EAAIF,EAASC,OAAQC,GAAKd,KAAKK,OAAQO,EAASE,GAAK,EAC/E,OAAO,IAAIX,EAAUH,KAAKK,OAAQL,KAAKM,QAASM,K,oBAGpD,WAEI,IADA,IAAMA,EAAW,IAAIJ,WAAWR,KAAKO,OAAOM,QACnCC,EAAI,EAAGA,EAAIF,EAASC,OAASb,KAAKK,OAAQS,IAAKF,EAASE,GAAKd,KAAKO,OAAOO,EAAId,KAAKK,QAC3F,OAAO,IAAIF,EAAUH,KAAKK,OAAQL,KAAKM,QAASM,K,sBAGpD,WAEI,IADA,IAAMA,EAAW,IAAIJ,WAAWR,KAAKO,OAAOM,QACnCC,EAAI,EAAGA,EAAIF,EAASC,OAASb,KAAKK,OAAQS,IAAKF,EAASE,EAAId,KAAKK,QAAUL,KAAKO,OAAOO,GAChG,OAAO,IAAIX,EAAUH,KAAKK,OAAQL,KAAKM,QAASM,K,mBAGpD,SAAaG,GAET,IADA,IAAMH,EAAW,IAAIJ,WAAWR,KAAKO,OAAOM,QACnCC,EAAI,EAAGA,EAAIF,EAASC,OAAQC,IAAKF,EAASE,GAAKd,KAAKO,OAAOO,KAAOC,EAAI,EAAO,EACtF,OAAO,IAAIZ,EAAUH,KAAKK,OAAQL,KAAKM,QAASM,K,iBAGpD,WAA+B,IAAC,IAAD,0BAAjBI,EAAiB,yBAAjBA,EAAiB,gBAC3B,GAAIA,EAAGC,MAAK,SAAAF,GAAC,OAAIA,EAAEV,SAAW,EAAKA,QAAUU,EAAET,UAAY,EAAKA,WAAU,MAAM,IAAII,MAAM,4CAG1F,IADA,IAAME,EAAWZ,KAAKO,OAAOW,KAAI,SAAAH,GAAC,OAAIA,KACtC,MAAcC,EAAd,eACI,IADC,IAAID,EAAC,KACGD,EAAI,EAAGA,EAAIF,EAASC,OAAQC,IAAKF,EAASE,IAAMC,EAAER,OAAOO,GAGtE,OAAO,IAAIX,EAAUH,KAAKK,OAAQL,KAAKM,QAASM,M,iBAGpD,SAAiBO,EAAcJ,GAC3B,GAAII,EAAEd,SAAWU,EAAEV,QAAUc,EAAEb,UAAYS,EAAET,QAAS,MAAM,IAAII,MAAM,2CAGtE,IADA,IAAME,EAAW,IAAIJ,WAAWW,EAAEZ,OAAOM,QAChCC,EAAI,EAAGA,EAAIF,EAASC,OAAQC,IAAKF,EAASE,GAAKK,EAAEZ,OAAOO,GAAKC,EAAER,OAAOO,GAC/E,OAAO,IAAIX,EAAUgB,EAAEd,OAAQc,EAAEb,QAASM,K,iBAG9C,SAAkBO,EAAcJ,GAC5B,GAAII,EAAEd,SAAWU,EAAEV,QAAUc,EAAEb,UAAYS,EAAET,QAAS,MAAM,IAAII,MAAM,4CAGtE,IADA,IAAME,EAAW,IAAIJ,WAAWW,EAAEZ,OAAOM,QAChCC,EAAI,EAAGA,EAAIF,EAASC,OAAQC,IAAKF,EAASE,GAAKK,EAAEZ,OAAOO,GAAKC,EAAER,OAAOO,GAC/E,OAAO,IAAIX,EAAUgB,EAAEd,OAAQc,EAAEb,QAASM,O,KAI7BQ,E,iDACAf,OAAS,I,KACTC,QAAU,I,KACnBe,OAAoB,IAAIlB,EAAUH,KAAKK,OAAQL,KAAKM,S,yCAE5D,WACIN,KAAKqB,OAAS,IAAIlB,EAAUH,KAAKK,OAAQL,KAAKM,W,0BAGlD,SAAqBL,EAAWC,GAAa,OAAO,EAAID,GAAKA,EAAID,KAAKK,OAAS,GAAK,EAAIH,GAAKA,EAAIF,KAAKM,QAAU,I,iBAEhH,SAAWL,EAAWC,GAClB,QAAKF,KAAKsB,aAAarB,EAAGC,IACO,IAA1BF,KAAKqB,OAAOE,IAAItB,EAAGC,K,iBAG9B,SAAWD,EAAWC,EAAWS,GACxBX,KAAKsB,aAAarB,EAAGC,IAC1BF,KAAKqB,OAAOG,IAAIvB,EAAGC,EAAGS,EAAQ,EAAO,K,kBAGzC,WACI,IAAMc,EAAIzB,KAAKqB,OAAOK,WAChBC,EAAI3B,KAAKqB,OAAOO,YAChBC,EAAI7B,KAAKqB,OAAOS,SAChBC,EAAI/B,KAAKqB,OAAOW,WAChBC,EAAKR,EAAEK,SACPI,EAAKP,EAAEG,SACPK,EAAKV,EAAEO,WACPI,EAAKT,EAAEK,WACPK,EAAMrC,KAAKqB,OAAOgB,IAAIZ,EAAGE,EAAGE,EAAGE,EAAGE,EAAIC,EAAIC,EAAIC,GAE9CE,EAASD,EAAIE,MAAM,GACnBC,EAAQH,EAAIE,MAAM,GAClBE,EAActC,EAAUuC,IAAIF,EAAOxC,KAAKqB,QAC9CrB,KAAKqB,OAASlB,EAAUwC,GAAGL,EAAQG,K,kBAGvC,SAAYG,EAAgBC,GAKxB,IAJA,IAAMC,EAAOC,KAAKC,IAAI,EAAGJ,EAAK3C,GACxBgD,EAAOF,KAAKG,IAAIlD,KAAKK,OAAQuC,EAAK3C,EAAI2C,EAAK7C,OAC3CoD,EAAOJ,KAAKC,IAAI,EAAGJ,EAAK1C,EAAI0C,EAAK/C,OAAS,GAC1CuD,EAAOL,KAAKG,IAAIlD,KAAKM,QAASsC,EAAK1C,EAAI,GACpCA,EAAIiD,EAAMjD,EAAIkD,EAAMlD,IAAK,IAAK,IAAID,EAAI6C,EAAM7C,EAAIgD,EAAMhD,IAAkC,IAA1BD,KAAKqB,OAAOE,IAAItB,EAAGC,IAAa2C,EAAS,CAAE5C,IAAGC,U,KC1H7H,IACMmD,EAAa,O,IAeEC,E,WAYjB,WAAmBC,GAAiB,yBAV5BC,SAAU,EAUiB,KATlBC,aASkB,OARlBC,UAAY,EAQM,KAPlBC,WAAa,EAOK,KAN3BC,YAM2B,OALlBC,gBAKkB,OAJ3BC,aAI2B,OAHlBC,WAGkB,OAF3BC,UAAY,EAEe,KAuD3BC,WAAY,EAvDe,KAwD3BC,WAAwB,CAAEjE,GAAI,EAAGC,GAAI,GAvDzCF,KAAKyD,QAAUU,SAASC,eAAeb,GACvCvD,KAAK4D,QAAU,EACf5D,KAAK6D,YAAc,EACnB7D,KAAK8D,QAAU,CAAE7D,GAAI,EAAGC,EAAGF,KAAKqE,WAAa,GAC7CrE,KAAK+D,MAAQ,IAAI3C,ECnBlB,SAAckD,EAAYxE,GAC7B,IAAQG,EAASH,EAATG,EAAGC,EAAMJ,EAANI,EACXoE,EAAK9C,IAAIvB,EAAI,EAAGC,EAAI,GAAG,GACvBoE,EAAK9C,IAAIvB,EAAI,EAAGC,EAAI,GAAG,GACvBoE,EAAK9C,IAAIvB,EAAI,EAAGC,EAAI,GAAG,GACvBoE,EAAK9C,IAAIvB,EAAI,EAAGC,EAAI,GAAG,GACvBoE,EAAK9C,IAAIvB,EAAI,EAAGC,EAAI,GAAG,GDcnBqE,CAAcvE,KAAK+D,MAAO,CAAE9D,EAAG,IAAKC,EAAG,MAKvCsE,OAAOC,iBAAiB,SAAUzE,KAAK0E,eAAeC,KAAK3E,OAC3DA,KAAKyD,QAAQgB,iBAAiB,QAASzE,KAAK4E,SAASD,KAAK3E,OAC1DwE,OAAOC,iBAAiB,UAAWzE,KAAK6E,UAAUF,KAAK3E,OACvDA,KAAKyD,QAAQgB,iBAAiB,YAAazE,KAAK8E,YAAYH,KAAK3E,OACjEA,KAAKyD,QAAQgB,iBAAiB,YAAazE,KAAK+E,YAAYJ,KAAK3E,OACjEA,KAAKyD,QAAQgB,iBAAiB,UAAWzE,KAAKgF,UAAUL,KAAK3E,OAC7DA,KAAK0E,iBACL1E,KAAKiF,Q,yCAGT,WACIjF,KAAKwD,SAAU,EACfgB,OAAOU,sBAAsBlF,KAAKmF,KAAKR,KAAK3E,S,kBAGhD,WACIA,KAAKwD,SAAU,I,4BAGnB,WAEIxD,KAAKyD,QAAQ1D,MAAQyE,OAAOY,WAC5BpF,KAAKyD,QAAQ5D,OAAS2E,OAAOa,YAC7BrF,KAAK8D,QAAU,CAAE7D,GAAI,EAAGC,EAAGF,KAAKqE,WAAa,K,uBAGjD,SAAkBiB,GACd,OAAQA,EAAGC,KACP,IAAK,IACDvF,KAAKwF,aACL,MACJ,IAAK,IACGxF,KAAKwD,QAASxD,KAAKyF,OAClBzF,KAAKiF,W,sBAKtB,SAAiBK,GACb,IAAMI,EAAI1F,KAAK2F,aAAaL,GACxBA,EAAGM,OAAS,EAAG5F,KAAK6F,OAAOH,GACtBJ,EAAGM,OAAS,GAAG5F,KAAK8F,QAAQJ,K,yBAKzC,SAAoBJ,GAChBtF,KAAKiE,WAAY,EACjBjE,KAAKkE,WAAalE,KAAK2F,aAAa,CAAE1F,EAAGqF,EAAGS,QAAS7F,EAAGoF,EAAGU,Y,yBAG/D,SAAoBV,GAChB,GAAKtF,KAAKiE,UAAV,CAEA,IAAMgC,EAAUjG,KAAK2F,aAAa,CAAE1F,EAAGqF,EAAGS,QAAS7F,EAAGoF,EAAGU,UACzDhG,KAAK8D,QAAU,CAAE7D,EAAGD,KAAK8D,QAAQ7D,EAAID,KAAKkE,WAAWjE,EAAIgG,EAAQhG,EAAGC,EAAGF,KAAK8D,QAAQ5D,EAAIF,KAAKkE,WAAWhE,EAAI+F,EAAQ/F,GACpHF,KAAKkG,iB,uBAGT,SAAkBZ,GACdtF,KAAKiE,WAAY,I,kBAGrB,SAAakC,GACT,IAAMC,EAAYD,EAAOnG,KAAKgE,UAC9BhE,KAAK+D,MAAMsC,OACPD,GAAa,qBACbpG,KAAKsG,OACLtG,KAAKgE,UAAYmC,GAEjBnG,KAAKwD,SAASgB,OAAOU,sBAAsBlF,KAAKmF,KAAKR,KAAK3E,S,kBAGlE,WACIA,KAAKkG,gB,0BAGT,WACI,IAAQK,EAAuBvG,KAAvBuG,IAAKxG,EAAkBC,KAAlBD,MAAOF,EAAWG,KAAXH,OACpB0G,EAAIC,UAtHM,OAuHVD,EAAIE,SAAS,EAAG,EAAG1G,EAAOF,K,yBAG9B,WACIG,KAAK0G,eACD1G,KAAK4D,OAAS,EAAG5D,KAAK2G,aACrB3G,KAAK4G,e,sBAGd,WACI,GAAK5G,KAAK6G,YAAV,CAEA,IAAQN,EAAuBvG,KAAvBuG,IAAKxG,EAAkBC,KAAlBD,MAAOF,EAAWG,KAAXH,OACpB0G,EAAIO,YAlIM,OAmIVP,EAAIQ,YAEJ,IAAK,IAAIjG,EAAI,EAAGA,EAAIf,EAAOe,GAAK,IAAMd,KAAK4D,OACvC2C,EAAIS,OAAOlG,EAAG,GACdyF,EAAIU,OAAOnG,EAAGjB,EAAS,GAE3B,IAAK,IAAIiB,EAAI,EAAGA,EAAIjB,EAAQiB,GAAK,IAAMd,KAAK4D,OACxC2C,EAAIS,OAAO,EAAGlG,GACdyF,EAAIU,OAAOlH,EAAQ,EAAGe,GAE1ByF,EAAIW,YACJX,EAAIY,Y,wBAGR,WAAsB,IAAD,OACTZ,EAAQvG,KAARuG,IACRA,EAAIC,UAAYnD,EAKhBrD,KAAK+D,MAAMuC,KAAKtG,KAAKoH,UAJH,SAAC1B,GACf,IAAM2B,EAAI,EAAKC,aAAa5B,GACxB,EAAK6B,mBAAmBF,IAAId,EAAIE,SAASY,EAAEpH,EAAGoH,EAAEnH,EAAG,IAAM,EAAK0D,OAAQ,IAAM,EAAKA,WAGzF5D,KAAKwH,a,wBAGT,WAAsB,IAAD,OACTjB,EAAuBvG,KAAvBuG,IAAKxG,EAAkBC,KAAlBD,MAAOF,EAAWG,KAAXH,OACd4H,EAAOlB,EAAImB,aAAa,EAAG,EAAG3H,EAAOF,GACrC8H,EA5Jd,SAAwBC,GACpB,IAAMC,EAAcD,EAAME,MAAM,GAC1BC,EAAgB,GACtB,GAA2B,IAAvBF,EAAYhH,OACZ,IAAK,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAKiH,EAAIC,KAAKC,OAAO,KAAD,OAAMJ,EAAYK,OAAOpH,GAAGqH,OAAO,WAE9E,IAAK,IAAIrH,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAAGiH,EAAIC,KAAKC,OAAO,KAAD,OAAMJ,EAAYC,MAAMhH,EAAGA,EAAI,MAEjF,OAAOiH,EAoJSK,CAAe/E,GAQ3BrD,KAAK+D,MAAMuC,KAAKtG,KAAKoH,UAPH,SAAC1B,GACf,IAAM2B,EAAI,EAAKC,aAAa5B,GAC5B+B,EAAKA,KAAKJ,EAAEnH,EAAIH,EAAQ,EAAU,EAANsH,EAAEpH,EAAQ,GAAK0H,EAAI,GAC/CF,EAAKA,KAAKJ,EAAEnH,EAAIH,EAAQ,EAAU,EAANsH,EAAEpH,EAAQ,GAAK0H,EAAI,GAC/CF,EAAKA,KAAKJ,EAAEnH,EAAIH,EAAQ,EAAU,EAANsH,EAAEpH,EAAQ,GAAK0H,EAAI,GAC/CF,EAAKA,KAAKJ,EAAEnH,EAAIH,EAAQ,EAAU,EAANsH,EAAEpH,EAAQ,GAAK,OAG/CsG,EAAI8B,aAAaZ,EAAM,EAAG,K,wBAG9B,WACI,IAAMa,EAAMtI,KAAKyD,QAAQ8E,UAAU,aAAaC,QAAQ,oBAAqB,iCACvEC,EAAetE,SAASuE,cAAc,KAC5CD,EAAaE,aAAa,WAAY,YACtCF,EAAaE,aAAa,OAAQL,GAClCG,EAAaG,U,qBAGjB,SAAgBlD,GACR1F,KAAK4D,OAAS5D,KAAK0D,YACnB1D,KAAK8D,QAAU,CAAE7D,EAAG,EAAID,KAAK8D,QAAQ7D,EAAIyF,EAAEzF,EAAGC,EAAG,EAAIF,KAAK8D,QAAQ5D,EAAIwF,EAAExF,GACxEF,KAAK4D,SACL5D,KAAKkG,iB,oBAIb,SAAeR,GACP1F,KAAK4D,OAAS5D,KAAK2D,YACnB3D,KAAK8D,QAAU,CAAE7D,EAAG8C,KAAK8F,OAAO7I,KAAK8D,QAAQ7D,EAAIyF,EAAEzF,GAAK,GAAIC,EAAG6C,KAAK8F,OAAO7I,KAAK8D,QAAQ5D,EAAIwF,EAAExF,GAAK,IACnGF,KAAK4D,SACL5D,KAAKkG,iB,kBAIb,WAAsB,OAAOlG,KAAKyD,U,iBAClC,WAAqB,OAAOzD,KAAK4D,Q,IACjC,SAAiBjD,GAAiBX,KAAK4D,OAASjD,I,qBAChD,WAAyB,OAAOX,KAAK6D,a,kBACrC,WAAsB,OAAO7D,KAAK8D,S,IAClC,SAAkBnD,GAAoBX,KAAK8D,QAAUnD,I,gBACrD,WAAoB,OAAOX,KAAK+D,Q,eAChC,WAAmB,OAAO/D,KAAKyD,QAAQqF,WAAW,Q,iBAClD,WAAqB,OAAO9I,KAAKyD,QAAQ1D,Q,kBACzC,WAAsB,OAAOC,KAAKyD,QAAQ5D,S,qBAE1C,SAAe6F,GACX,OAAI1F,KAAK4D,QAAU,EAAU8B,GAAK1F,KAAK4D,OAC3B8B,IAAM1F,KAAK4D,S,uBAG3B,SAAiBmF,GACb,OAAI/I,KAAK4D,QAAU,EAAUmF,GAAK/I,KAAK4D,OAC3BmF,IAAM/I,KAAK4D,S,qBAG3B,WAAyB,OAAO5D,KAAKgJ,QAAQhJ,KAAKyD,QAAQ1D,S,sBAC1D,WAA0B,OAAOC,KAAKgJ,QAAQhJ,KAAKyD,QAAQ5D,U,oBAC3D,WAAwB,OAAO,IAAIJ,EAASO,KAAK8D,QAAS9D,KAAKiJ,UAAWjJ,KAAKqE,c,0BAE/E,SAAoBqB,GAChB,MAAO,CACHzF,EAAGD,KAAKkJ,UAAUxD,EAAEzF,EAAID,KAAK8D,QAAQ7D,GACrCC,EAAGF,KAAKkJ,UAAUlJ,KAAK8D,QAAQ5D,EAAIwF,EAAExF,M,0BAI7C,SAAoBmH,GAChB,MAAO,CACHpH,EAAGD,KAAK8D,QAAQ7D,EAAID,KAAKgJ,QAAQ3B,EAAEpH,GACnCC,EAAGF,KAAK8D,QAAQ5D,EAAIF,KAAKgJ,QAAQ3B,EAAEnH,M,uBAI3C,WAA2B,OAAOF,KAAK4D,QAAU5D,KAAK6D,a,gCAEtD,SAA0BwD,GACtB,OAAO,GAAKA,EAAEpH,GAAKoH,EAAEpH,EAAID,KAAKyD,QAAQ1D,OAAS,GAAKsH,EAAEnH,GAAKmH,EAAEnH,EAAIF,KAAKyD,QAAQ5D,W,oBE1OzEsJ,EAAb,uKAEI,WACI,IAAMC,EAAW,IAAI9F,EAAS,cAC9BtD,KAAKqJ,SAAS,CAAED,eAJxB,kCAOI,WAA+B,IAAD,EAC1B,UAAApJ,KAAKsJ,MAAMF,gBAAX,SAAqB3D,SAR7B,oBAWI,WACI,OAAO,wBAAQ8D,UAAU,OAAOC,GAAG,mBAZ3C,GAAmCC,IAAMC,WCE1BC,MARf,WACE,OACE,qBAAKJ,UAAU,MAAf,SACE,cAAC,EAAD,OCMSK,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpG,SAASC,eAAe,SAM1BwF,M","file":"static/js/main.4d7747a1.chunk.js","sourcesContent":["export interface Life {\r\n    clear: () => void;\r\n    get: (x: number, y: number) => boolean;\r\n    set: (x: number, y: number, alive: boolean) => void;\r\n    draw: (rect: LifeRect, setPixel: (v: LifePoint) => void) => void;\r\n    step: () => void;\r\n}\r\n\r\nexport interface Point {\r\n    readonly x: number;\r\n    readonly y: number;\r\n}\r\n\r\nexport type LifePoint = Point;\r\n\r\nexport class LifeRect {\r\n    public readonly corner: LifePoint;\r\n    public readonly width: number;\r\n    public readonly height: number;\r\n\r\n    public constructor(corner: LifePoint, width: number, height: number)\r\n    public constructor(x: number, y: number, width: number, height: number)\r\n    public constructor(cornerOrX: LifePoint | number, widthOrY: number, heightOrWidth: number, height?: number) {\r\n        if (typeof cornerOrX === 'number') {\r\n            this.corner = { x: cornerOrX, y: widthOrY };\r\n            this.width = heightOrWidth;\r\n            this.height = height!;\r\n        } else {\r\n            this.corner = cornerOrX;\r\n            this.width = widthOrY;\r\n            this.height = heightOrWidth;\r\n        }\r\n    }\r\n\r\n    public get x() { return this.corner.x; }\r\n    public get y() { return this.corner.y; }\r\n}","import { Life, LifePoint, LifeRect } from './api';\r\n\r\nclass ByteBlock {\r\n    private readonly _width: number;\r\n    private readonly _height: number;\r\n    private readonly _bytes: Uint8Array;\r\n\r\n    public constructor(width: number, height: number, bytes?: Uint8Array) {\r\n        this._width = width;\r\n        this._height = height;\r\n        this._bytes = bytes || new Uint8Array(width * height);\r\n    }\r\n\r\n    private isValid(x: number, y: number) { return 0 <= x && x < this._width && 0 <= y && y < this._height; }\r\n\r\n    public get(x: number, y: number) {\r\n        if (!this.isValid(x, y)) throw new Error('ByteBlock get(): Out of range');\r\n        return this._bytes[y * this._width + x];\r\n    }\r\n\r\n    public set(x: number, y: number, value: number) {\r\n        if (!this.isValid(x, y)) throw new Error('ByteBlock set(): Out of range');\r\n        this._bytes[y * this._width + x] = value;\r\n    }\r\n\r\n    public moveLeft() {\r\n        const newBytes = new Uint8Array(this._bytes.length);\r\n        for (let i = 1; i < newBytes.length; i++) newBytes[i - 1] = this._bytes[i];\r\n        for (let i = this._width - 1; i < newBytes.length; i += this._width) newBytes[i] = 0x00;\r\n        return new ByteBlock(this._width, this._height, newBytes);\r\n    }\r\n\r\n    public moveRight() {\r\n        const newBytes = new Uint8Array(this._bytes.length);\r\n        for (let i = 1; i < newBytes.length; i++) newBytes[i] = this._bytes[i - 1];\r\n        for (let i = this._width; i < newBytes.length; i += this._width) newBytes[i] = 0x00;\r\n        return new ByteBlock(this._width, this._height, newBytes);\r\n    }\r\n\r\n    public moveUp() {\r\n        const newBytes = new Uint8Array(this._bytes.length);\r\n        for (let i = 0; i < newBytes.length - this._width; i++) newBytes[i] = this._bytes[i + this._width];\r\n        return new ByteBlock(this._width, this._height, newBytes);\r\n    }\r\n\r\n    public moveDown() {\r\n        const newBytes = new Uint8Array(this._bytes.length);\r\n        for (let i = 0; i < newBytes.length - this._width; i++) newBytes[i + this._width] = this._bytes[i];\r\n        return new ByteBlock(this._width, this._height, newBytes);\r\n    }\r\n\r\n    public where(b: number) {\r\n        const newBytes = new Uint8Array(this._bytes.length);\r\n        for (let i = 0; i < newBytes.length; i++) newBytes[i] = this._bytes[i] === b ? 0x01 : 0x00;\r\n        return new ByteBlock(this._width, this._height, newBytes);\r\n    }\r\n\r\n    public sum(...bs: ByteBlock[]) {\r\n        if (bs.some(b => b._width !== this._width || b._height !== this._height)) throw new Error('ByteBlock sum(): Incompatible ByteBlocks');\r\n\r\n        const newBytes = this._bytes.map(b => b);\r\n        for (let b of bs) {\r\n            for (let i = 0; i < newBytes.length; i++) newBytes[i] += b._bytes[i];\r\n        }\r\n\r\n        return new ByteBlock(this._width, this._height, newBytes);\r\n    }\r\n\r\n    public static or(a: ByteBlock, b: ByteBlock) {\r\n        if (a._width !== b._width || a._height !== b._height) throw new Error('ByteBlock or(): Incompatible ByteBlocks');\r\n\r\n        const newBytes = new Uint8Array(a._bytes.length);\r\n        for (let i = 0; i < newBytes.length; i++) newBytes[i] = a._bytes[i] | b._bytes[i];\r\n        return new ByteBlock(a._width, a._height, newBytes);\r\n    }\r\n\r\n    public static and(a: ByteBlock, b: ByteBlock) {\r\n        if (a._width !== b._width || a._height !== b._height) throw new Error('ByteBlock and(): Incompatible ByteBlocks');\r\n\r\n        const newBytes = new Uint8Array(a._bytes.length);\r\n        for (let i = 0; i < newBytes.length; i++) newBytes[i] = a._bytes[i] & b._bytes[i];\r\n        return new ByteBlock(a._width, a._height, newBytes);\r\n    }\r\n}\r\n\r\nexport default class ScholesLife implements Life {\r\n    private readonly _width = 256;\r\n    private readonly _height = 256;\r\n    private _cells: ByteBlock = new ByteBlock(this._width, this._height);\r\n\r\n    public clear() {\r\n        this._cells = new ByteBlock(this._width, this._height);\r\n    }\r\n\r\n    private isValidPoint(x: number, y: number) { return 0 < x && x < this._width - 1 && 0 < y && y < this._height - 1; }\r\n\r\n    public get(x: number, y: number) {\r\n        if (!this.isValidPoint(x, y)) return false;\r\n        return this._cells.get(x, y) === 0x01;\r\n    }\r\n\r\n    public set(x: number, y: number, value: boolean) {\r\n        if (!this.isValidPoint(x, y)) return;\r\n        this._cells.set(x, y, value ? 0x01 : 0x00);\r\n    }\r\n\r\n    public step() {\r\n        const w = this._cells.moveLeft();\r\n        const e = this._cells.moveRight();\r\n        const n = this._cells.moveUp();\r\n        const s = this._cells.moveDown();\r\n        const nw = w.moveUp();\r\n        const ne = e.moveUp();\r\n        const sw = w.moveDown();\r\n        const se = e.moveDown();\r\n        const sum = this._cells.sum(w, e, n, s, nw, ne, sw, se);\r\n\r\n        const threes = sum.where(3);\r\n        const fours = sum.where(4);\r\n        const livingFours = ByteBlock.and(fours, this._cells);\r\n        this._cells = ByteBlock.or(threes, livingFours);\r\n    }\r\n\r\n    public draw(rect: LifeRect, setPixel: (v: LifePoint) => void) {\r\n        const xmin = Math.max(0, rect.x);\r\n        const xmax = Math.min(this._width, rect.x + rect.width);\r\n        const ymin = Math.max(0, rect.y - rect.height + 1);\r\n        const ymax = Math.min(this._height, rect.y + 1);\r\n        for (let y = ymin; y < ymax; y++) for (let x = xmin; x < xmax; x++) if(this._cells.get(x, y) === 0x01) setPixel({ x, y });\r\n    }\r\n}","import { LifePoint, Life, LifeRect, Point } from './api';\r\n// import BoolArrayLife from './BoolArrayLife';\r\nimport ScholesLife from './ScholesLife';\r\n// import AbrashLife from './AbrashLife';\r\nimport * as patterns from './Patterns';\r\n\r\nconst deadColor = '#333';\r\nconst aliveColor = '#909';\r\nconst gridColor = '#000';\r\nconst ticksPerSecond = 1000 / 30;\r\n\r\nfunction hexStringToArr(color: string) {\r\n    const withoutHash = color.slice(1);\r\n    const arr: number[] = [];\r\n    if (withoutHash.length === 3) {\r\n        for (let i = 0; i < 3; i++) arr.push(Number(`0x${withoutHash.charAt(i).repeat(2)}`));\r\n    } else {\r\n        for (let i = 0; i < 6; i += 2) arr.push(Number(`0x${withoutHash.slice(i, i + 2)}`));\r\n    }\r\n    return arr;\r\n}\r\n\r\nexport default class LifeView {\r\n    // private _loopHandle: number | undefined;\r\n    private _doLoop = true;\r\n    private readonly _canvas: HTMLCanvasElement;\r\n    private readonly _maxScale = 0;\r\n    private readonly _minScale = -6;\r\n    private _scale: number;\r\n    private readonly _gridScale: number;\r\n    private _corner: LifePoint;\r\n    private readonly _life: Life;\r\n    private _prevTime = 0;\r\n\r\n    public constructor(canvas: string) {\r\n        this._canvas = document.getElementById(canvas) as HTMLCanvasElement;\r\n        this._scale = -1;\r\n        this._gridScale = -3;\r\n        this._corner = { x: -2, y: this.lifeHeight - 2 };\r\n        this._life = new ScholesLife();\r\n        patterns.addR(this._life, { x: 128, y: 128 });\r\n        // this._life = new BoolArrayLife();\r\n        // patterns.addBlinker(this._life, { x: 5, y: 5 });\r\n        // patterns.addAcorn(this._life, { x: 128, y: 128 });\r\n        // patterns.addAcorn(this._life, { x: 5, y: 5 });\r\n        window.addEventListener('resize', this.onWindowResize.bind(this));\r\n        this._canvas.addEventListener('wheel', this.onScroll.bind(this));\r\n        window.addEventListener('keydown', this.onKeyDown.bind(this));\r\n        this._canvas.addEventListener('mousedown', this.onMouseDown.bind(this));\r\n        this._canvas.addEventListener('mousemove', this.onMouseMove.bind(this));\r\n        this._canvas.addEventListener('mouseup', this.onMouseUp.bind(this));\r\n        this.onWindowResize();\r\n        this.start();\r\n    }\r\n\r\n    public start() {\r\n        this._doLoop = true;\r\n        window.requestAnimationFrame(this.loop.bind(this));\r\n    }\r\n\r\n    public stop() {\r\n        this._doLoop = false;\r\n    }\r\n\r\n    private onWindowResize() {\r\n        // this._canvas.width = this._canvas.height = Math.floor(Math.min(window.innerWidth, window.innerHeight) * 0.9);\r\n        this._canvas.width = window.innerWidth;\r\n        this._canvas.height = window.innerHeight;\r\n        this._corner = { x: -2, y: this.lifeHeight - 2 };\r\n    }\r\n\r\n    private onKeyDown(ev: KeyboardEvent) {\r\n        switch (ev.key) {\r\n            case 's':\r\n                this.screenshot();\r\n                break;\r\n            case ' ':\r\n                if (this._doLoop) this.stop();\r\n                else this.start();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private onScroll(ev: WheelEvent) {\r\n        const v = this.bitmapToLife(ev);\r\n        if (ev.deltaY < 0) this.zoomIn(v);\r\n        else if (ev.deltaY > 0) this.zoomOut(v);\r\n    }\r\n\r\n    private _dragging = false;\r\n    private _dragStart: LifePoint = { x: -1, y: -1 };\r\n    private onMouseDown(ev: MouseEvent) {\r\n        this._dragging = true;\r\n        this._dragStart = this.bitmapToLife({ x: ev.clientX, y: ev.clientY });\r\n    }\r\n\r\n    private onMouseMove(ev: MouseEvent) {\r\n        if (!this._dragging) return;\r\n\r\n        const current = this.bitmapToLife({ x: ev.clientX, y: ev.clientY });\r\n        this._corner = { x: this._corner.x + this._dragStart.x - current.x, y: this._corner.y + this._dragStart.y - current.y };\r\n        this.drawDisplay();\r\n    }\r\n\r\n    private onMouseUp(ev: MouseEvent) {\r\n        this._dragging = false;\r\n    }\r\n\r\n    private loop(time: number) {\r\n        const deltaTime = time - this._prevTime;\r\n        this._life.step();\r\n        if (deltaTime >= 1000 / ticksPerSecond) {\r\n            this.draw();\r\n            this._prevTime = time;\r\n        }\r\n        if (this._doLoop) window.requestAnimationFrame(this.loop.bind(this));\r\n    }\r\n\r\n    private draw() {\r\n        this.drawDisplay();\r\n    }\r\n\r\n    private clearDisplay() {\r\n        const { ctx, width, height } = this;\r\n        ctx.fillStyle = deadColor;\r\n        ctx.fillRect(0, 0, width, height);\r\n    }\r\n\r\n    private drawDisplay() {\r\n        this.clearDisplay();\r\n        if (this._scale < 0) this.drawBlocks();\r\n        else this.drawPixels();\r\n    }\r\n\r\n    private drawGrid() {\r\n        if (!this.gridEnabled) return;\r\n\r\n        const { ctx, width, height } = this;\r\n        ctx.strokeStyle = gridColor;\r\n        ctx.beginPath();\r\n\r\n        for (let i = 0; i < width; i += 1 << -this._scale) {\r\n            ctx.moveTo(i, 0);\r\n            ctx.lineTo(i, height - 1);\r\n        }\r\n        for (let i = 0; i < height; i += 1 << -this._scale) {\r\n            ctx.moveTo(0, i);\r\n            ctx.lineTo(width - 1, i);\r\n        }\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n    }\r\n\r\n    private drawBlocks() {\r\n        const { ctx } = this;\r\n        ctx.fillStyle = aliveColor;\r\n        const drawBlock = (v: LifePoint) => {\r\n            const p = this.lifeToBitmap(v);\r\n            if (this.isValidBitmapPoint(p)) ctx.fillRect(p.x, p.y, 1 << -this._scale, 1 << -this._scale);\r\n        };\r\n        this._life.draw(this.lifeRect, drawBlock);\r\n        this.drawGrid();\r\n    }\r\n\r\n    private drawPixels() {\r\n        const { ctx, width, height } = this;\r\n        const data = ctx.getImageData(0, 0, width, height);\r\n        const rgb = hexStringToArr(aliveColor);\r\n        const drawPixel = (v: LifePoint) => {\r\n            const p = this.lifeToBitmap(v);\r\n            data.data[p.y * width * 4 + p.x * 4 + 0] = rgb[0];\r\n            data.data[p.y * width * 4 + p.x * 4 + 1] = rgb[1];\r\n            data.data[p.y * width * 4 + p.x * 4 + 2] = rgb[2];\r\n            data.data[p.y * width * 4 + p.x * 4 + 3] = 0xff;\r\n        };\r\n        this._life.draw(this.lifeRect, drawPixel);\r\n        ctx.putImageData(data, 0, 0);\r\n    }\r\n\r\n    private screenshot() {\r\n        const url = this._canvas.toDataURL('image/png').replace(/^data:image\\/[^;]/, 'data:application/octet-stream');\r\n        const downloadLink = document.createElement('a');\r\n        downloadLink.setAttribute('download', 'Life.png');\r\n        downloadLink.setAttribute('href', url);\r\n        downloadLink.click();\r\n    }\r\n\r\n    private zoomOut(v: LifePoint) {\r\n        if (this._scale < this._maxScale) {\r\n            this._corner = { x: 2 * this._corner.x - v.x, y: 2 * this._corner.y - v.y };\r\n            this._scale++;\r\n            this.drawDisplay();\r\n        }\r\n    }\r\n\r\n    private zoomIn(v: LifePoint) {\r\n        if (this._scale > this._minScale) {\r\n            this._corner = { x: Math.floor((this._corner.x + v.x) / 2), y: Math.floor((this._corner.y + v.y) / 2) };\r\n            this._scale--;\r\n            this.drawDisplay();\r\n        }\r\n    }\r\n\r\n    public get canvas() { return this._canvas; }\r\n    public get scale() { return this._scale; }\r\n    public set scale(value: number) { this._scale = value; }\r\n    public get gridScale() { return this._gridScale; }\r\n    public get corner() { return this._corner; }\r\n    public set corner(value: LifePoint) { this._corner = value; }\r\n    public get life() { return this._life; }\r\n    public get ctx() { return this._canvas.getContext('2d')!; }\r\n    public get width() { return this._canvas.width; }\r\n    public get height() { return this._canvas.height; }\r\n\r\n    public scaleUp(v: number) {\r\n        if (this._scale >= 0) return v << this._scale;\r\n        else return v >> -this._scale;\r\n    }\r\n\r\n    public scaleDown(l: number) {\r\n        if (this._scale >= 0) return l >> this._scale;\r\n        else return l << -this._scale;\r\n    }\r\n\r\n    public get lifeWidth() { return this.scaleUp(this._canvas.width); }\r\n    public get lifeHeight() { return this.scaleUp(this._canvas.height); }\r\n    public get lifeRect() { return new LifeRect(this._corner, this.lifeWidth, this.lifeHeight); }\r\n\r\n    public lifeToBitmap(v: LifePoint): Point {\r\n        return {\r\n            x: this.scaleDown(v.x - this._corner.x),\r\n            y: this.scaleDown(this._corner.y - v.y),\r\n        };\r\n    }\r\n\r\n    public bitmapToLife(p: Point): LifePoint {\r\n        return {\r\n            x: this._corner.x + this.scaleUp(p.x),\r\n            y: this._corner.y - this.scaleUp(p.y),\r\n        };\r\n    }\r\n\r\n    public get gridEnabled() { return this._scale <= this._gridScale; }\r\n\r\n    public isValidBitmapPoint(p: Point) {\r\n        return 0 <= p.x && p.x < this._canvas.width && 0 <= p.y && p.y < this._canvas.height;\r\n    }\r\n}","import { Life, LifePoint } from './api';\r\n\r\nexport function addBlinker(life: Life, corner: LifePoint) {\r\n    const { x, y } = corner;\r\n    life.set(x, y, true);\r\n    life.set(x, y - 1, true);\r\n    life.set(x, y - 2, true);\r\n}\r\n\r\nexport function addAcorn(life: Life, corner: LifePoint) {\r\n    const { x, y } = corner;\r\n    life.set(x + 1, y, true);\r\n    life.set(x + 3, y - 1, true);\r\n    life.set(x, y - 2, true);\r\n    life.set(x + 1, y - 2, true);\r\n    life.set(x + 4, y - 2, true);\r\n    life.set(x + 5, y - 2, true);\r\n    life.set(x + 6, y - 2, true);\r\n}\r\n\r\nexport function addR(life: Life, corner: LifePoint) {\r\n    const { x, y } = corner;\r\n    life.set(x + 1, y + 0, true);\r\n    life.set(x + 2, y + 0, true);\r\n    life.set(x + 0, y - 1, true);\r\n    life.set(x + 1, y - 1, true);\r\n    life.set(x + 1, y - 2, true);\r\n}","import React from 'react';\r\nimport LifeView from './Life/LifeView';\r\n\r\nimport './Life.css';\r\n\r\ninterface LifeComponentState {\r\n    lifeData?: LifeView\r\n}\r\n\r\n// https://github.com/ericlippert/ConwaysLife/tree/episode11\r\n// https://ericlippert.com/2020/05/21/life-part-11/\r\nexport class LifeComponent extends React.Component<{}, LifeComponentState> {\r\n\r\n    public componentDidMount() {\r\n        const lifeData = new LifeView('lifeCanvas');\r\n        this.setState({ lifeData });\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        this.state.lifeData?.stop();\r\n    }\r\n\r\n    public render() {\r\n        return <canvas className=\"Life\" id=\"lifeCanvas\" />\r\n    }\r\n}","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport { LifeComponent } from './LifeComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LifeComponent />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}