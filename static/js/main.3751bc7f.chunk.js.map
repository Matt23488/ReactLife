{"version":3,"sources":["Life/api.ts","Life/AbrashLife.ts","Life/Patterns.ts","Life/LifeView.ts","Game.ts","LifeComponent.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LifeRect","cornerOrX","widthOrY","heightOrWidth","height","corner","width","this","x","y","Cell","cell","_cell","_statem","_nextm","_countm","_state","_next","AbrashLife","_width","_height","_cells","_changes","clear","state","push","increment","makeAlive","decrement","makeDead","isValidPoint","value","becomeAlive","becomeDead","currentChanges","cx","cy","xmin","Math","max","xmax","min","ymin","ymax","count","newState","nextDead","nextAlive","nextState","rect","setPixel","PlaintextPattern","plaintext","_plaintext","life","lines","split","filter","line","startsWith","set","RLEPattern","rle","_rle","map","trim","len","c","Number","i","addPattern","pattern","fileParts","length","add","acorn","beehive","blinker","block","boat","bookends","glider","honeyfarm","hwss","lwss","mwss","pond","puffer1","puffer2","pulsar","rpentomino","snake","spider","trafficlight","tub","allPatterns","aliveColor","LifeView","canvas","_canvas","_maxScale","_minScale","_scale","_gridScale","_corner","_life","_dragging","_dragStart","document","getElementById","lifeHeight","patterns","window","addEventListener","onWindowResize","bind","onScroll","onKeyDown","onMouseDown","onMouseMove","onMouseUp","draw","deltaTickTime","step","deltaRenderTime","drawDisplay","clientWidth","clientHeight","ev","key","screenshot","running","stop","start","v","bitmapToLife","deltaY","zoomIn","zoomOut","clientX","clientY","current","ctx","fillStyle","fillRect","clearDisplay","drawBlocks","drawPixels","gridEnabled","strokeStyle","beginPath","moveTo","lineTo","closePath","stroke","lifeRect","p","lifeToBitmap","isValidBitmapPoint","drawGrid","data","getImageData","rgb","color","withoutHash","slice","arr","charAt","repeat","hexStringToArr","putImageData","url","toDataURL","replace","downloadLink","createElement","setAttribute","click","floor","getContext","l","scaleUp","lifeWidth","scaleDown","targetFPS","limitTick","_targetFPS","_limitTick","_lastRenderTime","_lastTickTime","_doLoop","time","tick","render","requestAnimationFrame","loop","LifeComponent","props","selectedPattern","lifeData","target","setState","className","id","onChange","onPatternChange","Object","keys","onClick","onToggleRunning","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.3751bc7f.chunk.js","sourcesContent":["export interface Life {\r\n    readonly width: number;\r\n    readonly height: number;\r\n    clear: () => void;\r\n    get: (x: number, y: number) => boolean;\r\n    set: (x: number, y: number, alive: boolean) => void;\r\n    draw: (rect: LifeRect, setPixel: (v: LifePoint) => void) => void;\r\n    step: () => void;\r\n}\r\n\r\nexport interface Point {\r\n    readonly x: number;\r\n    readonly y: number;\r\n}\r\n\r\nexport type LifePoint = Point;\r\n\r\nexport class LifeRect {\r\n    public readonly corner: LifePoint;\r\n    public readonly width: number;\r\n    public readonly height: number;\r\n\r\n    public constructor(corner: LifePoint, width: number, height: number)\r\n    public constructor(x: number, y: number, width: number, height: number)\r\n    public constructor(cornerOrX: LifePoint | number, widthOrY: number, heightOrWidth: number, height?: number) {\r\n        if (typeof cornerOrX === 'number') {\r\n            this.corner = { x: cornerOrX, y: widthOrY };\r\n            this.width = heightOrWidth;\r\n            this.height = height!;\r\n        } else {\r\n            this.corner = cornerOrX;\r\n            this.width = widthOrY;\r\n            this.height = heightOrWidth;\r\n        }\r\n    }\r\n\r\n    public get x() { return this.corner.x; }\r\n    public get y() { return this.corner.y; }\r\n}","import { Life, LifePoint, LifeRect } from './api';\r\n\r\nclass Cell {\r\n    private readonly _cell: number;\r\n    public constructor(cell: number) {\r\n        this._cell = cell;\r\n    }\r\n\r\n    private static readonly _state = 4;\r\n    private static readonly _statem = 1 << Cell._state;\r\n    private static readonly _countm = 0x0f;\r\n    private static readonly _next = 5;\r\n    private static readonly _nextm = 1 << Cell._next;\r\n\r\n    public get state() { return (this._cell & Cell._statem) !== 0; }\r\n    public get nextState() { return (this._cell & Cell._nextm) !== 0; }\r\n    public get count() { return this._cell & Cell._countm; }\r\n\r\n    public get allDead() { return this._cell === 0; }\r\n\r\n    public makeAlive() { return new Cell(this._cell | Cell._statem); }\r\n    public makeDead() { return new Cell(this._cell & ~Cell._statem); }\r\n    public nextAlive() { return new Cell(this._cell | Cell._nextm); }\r\n    public nextDead() { return new Cell(this._cell & ~Cell._nextm); }\r\n\r\n    public increment() {\r\n        return new Cell(this._cell + 1);\r\n    }\r\n\r\n    public decrement() {\r\n        return new Cell(this._cell - 1);\r\n    }\r\n\r\n    public clone() { return new Cell(this._cell); }\r\n}\r\n\r\nexport default class AbrashLife implements Life {\r\n    private readonly _width = 258;\r\n    private readonly _height = 258;\r\n    private _cells: Cell[][] = [];\r\n    private _changes: [number, number][] = [];\r\n\r\n    public constructor() { this.clear(); }\r\n\r\n    public get width() { return this._width; }\r\n    public get height() { return this._height; }\r\n\r\n    public clear() {\r\n        this._cells = [];\r\n        for (let x = 0; x < this._width; x++) {\r\n            this._cells[x] = [];\r\n            for (let y = 0; y < this._height; y++) this._cells[x][y] = new Cell(0);\r\n        }\r\n    }\r\n    private isValidPoint(x: number, y: number) { return 0 < x && x < this._width - 1 && 0 < y && y < this._height - 1; }\r\n\r\n    private becomeAlive(x: number, y: number) {\r\n        if (this._cells[x][y].state) return;\r\n        this._changes.push([x, y]);\r\n        this._cells[x - 1][y - 1] = this._cells[x - 1][y - 1].increment();\r\n        this._cells[x - 1][y + 0] = this._cells[x - 1][y + 0].increment();\r\n        this._cells[x - 1][y + 1] = this._cells[x - 1][y + 1].increment();\r\n        this._cells[x + 0][y - 1] = this._cells[x + 0][y - 1].increment();\r\n        this._cells[x + 0][y + 0] = this._cells[x + 0][y + 0].makeAlive();\r\n        this._cells[x + 0][y + 1] = this._cells[x + 0][y + 1].increment();\r\n        this._cells[x + 1][y - 1] = this._cells[x + 1][y - 1].increment();\r\n        this._cells[x + 1][y + 0] = this._cells[x + 1][y + 0].increment();\r\n        this._cells[x + 1][y + 1] = this._cells[x + 1][y + 1].increment();\r\n    }\r\n\r\n    private becomeDead(x: number, y: number) {\r\n        if (!this._cells[x][y].state) return;\r\n        this._changes.push([x, y]);\r\n        this._cells[x - 1][y - 1] = this._cells[x - 1][y - 1].decrement();\r\n        this._cells[x - 1][y + 0] = this._cells[x - 1][y + 0].decrement();\r\n        this._cells[x - 1][y + 1] = this._cells[x - 1][y + 1].decrement();\r\n        this._cells[x + 0][y - 1] = this._cells[x + 0][y - 1].decrement();\r\n        this._cells[x + 0][y + 0] = this._cells[x + 0][y + 0].makeDead();\r\n        this._cells[x + 0][y + 1] = this._cells[x + 0][y + 1].decrement();\r\n        this._cells[x + 1][y - 1] = this._cells[x + 1][y - 1].decrement();\r\n        this._cells[x + 1][y + 0] = this._cells[x + 1][y + 0].decrement();\r\n        this._cells[x + 1][y + 1] = this._cells[x + 1][y + 1].decrement();\r\n    }\r\n\r\n    public get(x: number, y: number) {\r\n        if (this.isValidPoint(x, y)) return this._cells[x][y].state;\r\n        else return false;\r\n    }\r\n\r\n    public set(x: number, y: number, value: boolean) {\r\n        if (!this.isValidPoint(x, y)) return;\r\n        const c = this._cells[x][y];\r\n\r\n        if (c.state === value) return;\r\n        if (value) this.becomeAlive(x, y);\r\n        else this.becomeDead(x, y);\r\n    }\r\n\r\n    public step() {\r\n        const currentChanges: [number, number][] = [];\r\n        for (let [cx, cy] of this._changes) {\r\n            const xmin = Math.max(cx - 1, 1);\r\n            const xmax = Math.min(cx + 2, this._width - 1);\r\n            const ymin = Math.max(cy - 1, 1);\r\n            const ymax = Math.min(cy + 2, this._height - 1);\r\n            for (let y = ymin; y < ymax; y++) {\r\n                for (let x = xmin; x < xmax; x++) {\r\n                    const cell = this._cells[x][y];\r\n                    const { count, state } = cell;\r\n                    const newState = count === 3 || (count === 2 && state);\r\n                    \r\n                    if (state && !newState) {\r\n                        currentChanges.push([x, y]);\r\n                        this._cells[x][y] = cell.nextDead();\r\n                    } else if (!state && newState) {\r\n                        currentChanges.push([x, y]);\r\n                        this._cells[x][y] = cell.nextAlive();\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this._changes = [];\r\n        for (let [x, y] of currentChanges) {\r\n            if (this._cells[x][y].nextState) this.becomeAlive(x, y);\r\n            else this.becomeDead(x, y);\r\n        }\r\n    }\r\n\r\n    public draw(rect: LifeRect, setPixel: (v: LifePoint) => void) {\r\n        const xmin = Math.max(1, rect.x);\r\n        const xmax = Math.min(this._width - 1, rect.x + rect.width);\r\n        const ymin = Math.max(1, rect.y - rect.height + 1);\r\n        const ymax = Math.min(this._height - 1, rect.y + 1);\r\n        for (let y = ymin; y < ymax; y++) for (let x = xmin; x < xmax; x++) if (this._cells[x][y].state) setPixel({ x, y });\r\n    }\r\n}","import { Life, LifePoint } from './api';\r\n\r\nexport interface Pattern {\r\n    add: (life: Life, corner: LifePoint) => void;\r\n}\r\n\r\nclass PlaintextPattern implements Pattern {\r\n    // The plaintext Life pattern format is described here: https://www.conwaylife.com/wiki/Plaintext\r\n    // Briefly:\r\n    // ! indicates a comment\r\n    // O is a living cell\r\n    // . is a dead cell\r\n    // Rows are indicated by line breaks\r\n    private readonly _plaintext: string;\r\n\r\n    public constructor(plaintext: string) {\r\n        this._plaintext = plaintext;\r\n    }\r\n\r\n    add(life: Life, corner: LifePoint) {\r\n        var lines = this._plaintext.split(/\\r?\\n/).filter(line => !line.startsWith('!'));\r\n        let y = corner.y;\r\n        for (let line of lines) {\r\n            let x = corner.x;\r\n            for (let c of line) {\r\n                if (c === 'O') life.set(x, y, true);\r\n                x++;\r\n            }\r\n            y--;\r\n        }\r\n    }\r\n}\r\n\r\nclass RLEPattern implements Pattern {\r\n    // The RLE Life pattern format is described here: https://www.conwaylife.com/wiki/Run_Length_Encoded\r\n    // Briefly:\r\n    // # indicates a comment\r\n    // \"x = n, y = n\" gives the bounding box of the pattern.\r\n    // A number followed by b or o indicates that number of dead or\r\n    // alive cells, respectively, and the number may be omitted if the number is one.\r\n    // A number followed by $ is a newline, and again, it may bo omitted if one.\r\n    // ! is the end of the pattern.\r\n    private readonly _rle: string;\r\n    public constructor(rle: string) {\r\n        this._rle = rle;\r\n    }\r\n\r\n    public add(life: Life, corner: LifePoint) {\r\n        const lines = this._rle.split(/\\r?\\n/)\r\n            .map(line => line.trim())\r\n            .filter(line => !line.startsWith('#') && !line.startsWith('x'));\r\n        \r\n        let { x, y } = corner;\r\n        let len = 0;\r\n        for (let line of lines) {\r\n            for (let c of line) {\r\n                switch (c) {\r\n                    case '0':\r\n                    case '1':\r\n                    case '2':\r\n                    case '3':\r\n                    case '4':\r\n                    case '5':\r\n                    case '6':\r\n                    case '7':\r\n                    case '8':\r\n                    case '9':\r\n                        len = len * 10 + Number(c);\r\n                        break;\r\n                    case 'b':\r\n                        x += Math.max(len, 1);\r\n                        len = 0;\r\n                        break;\r\n                    case 'o':\r\n                        len = Math.max(len, 1);\r\n                        for (let i = 0; i < len; i++) life.set(x + i, y, true);\r\n                        x += len;\r\n                        len = 0;\r\n                        break;\r\n                    case '$':\r\n                        y -= Math.max(len, 1);\r\n                        x = corner.x;\r\n                        len = 0;\r\n                        break;\r\n                    case '!': return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function addPattern(life: Life, corner: LifePoint, pattern: Pattern): void;\r\nexport function addPattern(life: Life, corner: LifePoint, pattern: string): void;\r\nexport function addPattern(life: Life, corner: LifePoint, pattern: Pattern | string) {\r\n    if (typeof pattern === 'string') {\r\n        const fileParts = pattern.split('.');\r\n        const type = fileParts[fileParts.length - 1];\r\n\r\n    } else pattern.add(life, corner);\r\n}\r\n\r\n//--PATTERNS\nexport const acorn = new PlaintextPattern('!Name: Acorn\\n!Author: Charles Corderman\\n!A methuselah that stabilizes after 5206 generations.\\n!www.conwaylife.com/wiki/index.php?title=Acorn\\n.O\\n...O\\nOO..OOO\\n');\nexport const beehive = new PlaintextPattern('!Name: Beehive\\n!Author: John Conway\\n!The second most common still life.\\n!www.conwaylife.com/wiki/index.php?title=Beehive\\n.OO\\nO..O\\n.OO\\n');\nexport const blinker = new PlaintextPattern('!Name: Blinker\\n!Author: John Conway\\n!The smallest and most common oscillator.\\n!www.conwaylife.com/wiki/index.php?title=Blinker\\nOOO\\n');\nexport const block = new PlaintextPattern('!Name: Block\\n!The most common still life.\\n!www.conwaylife.com/wiki/index.php?title=Block\\nOO\\nOO\\n');\nexport const boat = new PlaintextPattern('!Name: Boat\\n!The only 5-cell still life.\\n!www.conwaylife.com/wiki/index.php?title=Boat\\nOO\\nO.O\\n.O\\n');\nexport const bookends = new PlaintextPattern('!Name: Bookends\\n!A still life.\\n!www.conwaylife.com/wiki/index.php?title=Bookends\\nOO...OO\\nO.O.O.O\\n..O.O\\n.OO.OO\\n');\nexport const glider = new PlaintextPattern('!Name: Glider\\n!Author: Richard K. Guy\\n!The smallest, most common, and first discovered spaceship.\\n!www.conwaylife.com/wiki/index.php?title=Glider\\n.O\\n..O\\nOOO\\n');\nexport const honeyfarm = new PlaintextPattern('!Name: Honey farm\\n!A common formation of four beehives.\\n!http://www.conwaylife.com/wiki/index.php?title=Honey_farm\\n......O\\n.....O.O\\n.....O.O\\n......O\\n\\n.OO.......OO\\nO..O.....O..O\\n.OO.......OO\\n\\n......O\\n.....O.O\\n.....O.O\\n......O\\n');\nexport const hwss = new PlaintextPattern('﻿!Name: HWSS\\n!Author: John Conway\\n!The fourth most common spaceship (after the glider, lightweight spaceship and middleweight spaceship).\\n!http://www.conwaylife.com/wiki/index.php?title=Heavyweight_spaceship\\n...OO..\\n.O....O\\nO......\\nO.....O\\nOOOOOO.');\nexport const lwss = new PlaintextPattern('﻿!Name: LWSS\\n!Author: John Conway\\n!The smallest known orthogonally moving spaceship, and the second most common spaceship(after the glider).\\n!http://www.conwaylife.com/wiki/index.php?title=Lightweight_spaceship\\n.O..O\\nO....\\nO...O\\nOOOO');\nexport const mwss = new PlaintextPattern('﻿!Name: MWSS\\n!Author: John Conway\\n!The third most common spaceship (after the glider and lightweight spaceship).\\n!http://www.conwaylife.com/wiki/index.php?title=Middleweight_spaceship\\n...O..\\n.O...O\\nO.....\\nO....O\\nOOOOO.');\nexport const pond = new PlaintextPattern('!Name: Pond\\n!A still life.\\n!www.conwaylife.com/wiki/index.php?title=Pond\\n.OO\\nO..O\\nO..O\\n.OO\\n');\nexport const puffer1 = new PlaintextPattern('﻿!Name: Puffer 1\\n!Author: Bill Gosper\\n!An orthogonal, period-128 puffer and the first puffer to be discovered\\n!http://www.conwaylife.com/wiki/index.php?title=Puffer_1\\n.OOO......O.....O......OOO.\\nO..O.....OOO...OOO.....O..O\\n...O....OO.O...O.OO....O...\\n...O...................O...\\n...O..O.............O..O...\\n...O..OO...........OO..O...\\n..O...OO...........OO...O..');\nexport const puffer2 = new PlaintextPattern('﻿!Name: Puffer 2\\n!Author: Bill Gosper\\n!The second puffer to be found.It uses two lightweight spaceships to escort a B-heptomino.\\n!http://www.conwaylife.com/wiki/index.php?title=Puffer_2\\n.OOO...........OOO\\nO..O..........O..O\\n...O....OOO......O\\n...O....O..O.....O\\n..O....O........O.');\nexport const pulsar = new PlaintextPattern('!Name: Pulsar\\n!Author: John Conway\\n!Despite its size, this is the fourth most common oscillator (and by far the most common of period greater than 2).\\n!www.conwaylife.com/wiki/index.php?title=Pulsar\\n..OOO...OOO\\n\\nO....O.O....O\\nO....O.O....O\\nO....O.O....O\\n..OOO...OOO\\n\\n..OOO...OOO\\nO....O.O....O\\nO....O.O....O\\nO....O.O....O\\n\\n..OOO...OOO\\n');\nexport const rpentomino = new PlaintextPattern('!Name: R-pentomino\\n!The most active polyomino with less than six cells; all of the others stabilize in at most 10 generations, but the R-pentomino does not do so until generation 1103, by which time it has a population of 116.\\n!www.conwaylife.com/wiki/index.php?title=R-pentomino\\n.OO\\nOO\\n.O\\n');\nexport const snake = new PlaintextPattern('!Name: Snake\\n!The twenty-first most common still life.\\n!http://www.conwaylife.com/wiki/index.php?title=Snake\\nOO.O\\nO.OO\\n');\nexport const spider = new RLEPattern('﻿#N Spider\\n#O David Bell\\n#C A c/5 period 5 orthogonal spaceship found in April 1997. It is the \\n#C smallest known c/5 spaceship.\\n#C http://www.conwaylife.com/wiki/index.php?title=Spider\\nx = 27, y = 8, rule = B3/S23\\n9bo7bo9b$3b2obobob2o3b2obobob2o3b$3obob3o9b3obob3o$o3bobo5bobo5bobo3bo\\n$4b2o6bobo6b2o4b$b2o9bobo9b2ob$b2ob2o15b2ob2ob$5bo15bo!');\nexport const trafficlight = new PlaintextPattern('!Name: Traffic light\\n!A common formation of four blinkers.\\n!www.conwaylife.com/wiki/index.php?title=Traffic_light\\n..OOO\\n\\nO.....O\\nO.....O\\nO.....O\\n\\n..OOO\\n');\nexport const tub = new PlaintextPattern('!Name: Tub\\n!A very common still life.\\n!www.conwaylife.com/wiki/index.php?title=Tub\\n.O\\nO.O\\n.O\\n');\nexport const allPatterns: { [key: string]: Pattern } = { acorn, beehive, blinker, block, boat, bookends, glider, honeyfarm, hwss, lwss, mwss, pond, puffer1, puffer2, pulsar, rpentomino, snake, spider, trafficlight, tub };\n//--END","import { LifePoint, Life, LifeRect, Point } from './api';\r\n// import BoolArrayLife from './BoolArrayLife';\r\n// import ScholesLife from './ScholesLife';\r\nimport AbrashLife from './AbrashLife';\r\nimport * as patterns from './Patterns';\r\nimport Game from '../Game';\r\nimport { Pattern } from './Patterns';\r\n\r\nconst deadColor = '#333';\r\nconst aliveColor = '#a0c';\r\nconst gridColor = '#000';\r\nconst ticksPerSecond = 80;//1000 / 10;\r\n\r\nfunction hexStringToArr(color: string) {\r\n    const withoutHash = color.slice(1);\r\n    const arr: number[] = [];\r\n    if (withoutHash.length === 3) {\r\n        for (let i = 0; i < 3; i++) arr.push(Number(`0x${withoutHash.charAt(i).repeat(2)}`));\r\n    } else {\r\n        for (let i = 0; i < 6; i += 2) arr.push(Number(`0x${withoutHash.slice(i, i + 2)}`));\r\n    }\r\n    return arr;\r\n}\r\n\r\nexport default class LifeView extends Game {\r\n    private readonly _canvas: HTMLCanvasElement;\r\n    private readonly _maxScale = 0;\r\n    private readonly _minScale = -6;\r\n    private _scale: number;\r\n    private readonly _gridScale: number;\r\n    private _corner: LifePoint;\r\n    private readonly _life: Life;\r\n\r\n    public constructor(canvas: string) {\r\n        super(ticksPerSecond);\r\n        this._canvas = document.getElementById(canvas) as HTMLCanvasElement;\r\n        this._scale = -1;\r\n        this._gridScale = -3;\r\n        this._corner = { x: -2, y: this.lifeHeight - 2 };\r\n        this._life = new AbrashLife();\r\n        // patterns.addR(this._life, { x: 128, y: 128 });\r\n        // patterns.addAcorn(this._life, { x: 129, y: 129 });\r\n        patterns.addPattern(this._life, { x: 129, y: 129 }, patterns.puffer2);\r\n        window.addEventListener('resize', this.onWindowResize.bind(this));\r\n        this._canvas.addEventListener('wheel', this.onScroll.bind(this));\r\n        window.addEventListener('keydown', this.onKeyDown.bind(this));\r\n        this._canvas.addEventListener('mousedown', this.onMouseDown.bind(this));\r\n        this._canvas.addEventListener('mousemove', this.onMouseMove.bind(this));\r\n        this._canvas.addEventListener('mouseup', this.onMouseUp.bind(this));\r\n        this.onWindowResize();\r\n        this.draw();\r\n        // this.start();\r\n    }\r\n\r\n    protected tick(deltaTickTime: number) {\r\n        this._life.step();\r\n    }\r\n\r\n    protected render(deltaRenderTime: number) {\r\n        this.drawDisplay();\r\n    }\r\n\r\n    private onWindowResize() {\r\n        // this._canvas.width = this._canvas.height = Math.floor(Math.min(window.innerWidth, window.innerHeight) * 0.9);\r\n        this._canvas.width = this._canvas.clientWidth;//window.innerWidth;\r\n        this._canvas.height = this._canvas.clientHeight;//window.innerHeight;\r\n        this._corner = { x: -2, y: this.lifeHeight - 2 };\r\n    }\r\n\r\n    private onKeyDown(ev: KeyboardEvent) {\r\n        switch (ev.key) {\r\n            case 's':\r\n                this.screenshot();\r\n                break;\r\n            case ' ':\r\n                if (this.running) this.stop();\r\n                else this.start();\r\n                break;\r\n        }\r\n    }\r\n\r\n    private onScroll(ev: WheelEvent) {\r\n        const v = this.bitmapToLife(ev);\r\n        if (ev.deltaY < 0) this.zoomIn(v);\r\n        else if (ev.deltaY > 0) this.zoomOut(v);\r\n    }\r\n\r\n    private _dragging = false;\r\n    private _dragStart: LifePoint = { x: -1, y: -1 };\r\n    private onMouseDown(ev: MouseEvent) {\r\n        this._dragging = true;\r\n        this._dragStart = this.bitmapToLife({ x: ev.clientX, y: ev.clientY });\r\n    }\r\n\r\n    private onMouseMove(ev: MouseEvent) {\r\n        if (!this._dragging) return;\r\n\r\n        const current = this.bitmapToLife({ x: ev.clientX, y: ev.clientY });\r\n        this._corner = { x: this._corner.x + this._dragStart.x - current.x, y: this._corner.y + this._dragStart.y - current.y };\r\n        this.drawDisplay();\r\n    }\r\n\r\n    private onMouseUp(ev: MouseEvent) {\r\n        this._dragging = false;\r\n    }\r\n\r\n    private draw() {\r\n        this.drawDisplay();\r\n    }\r\n\r\n    private clearDisplay() {\r\n        const { ctx, width, height } = this;\r\n        ctx.fillStyle = deadColor;\r\n        ctx.fillRect(0, 0, width, height);\r\n    }\r\n\r\n    private drawDisplay() {\r\n        this.clearDisplay();\r\n        if (this._scale < 0) this.drawBlocks();\r\n        else this.drawPixels();\r\n    }\r\n\r\n    private drawGrid() {\r\n        if (!this.gridEnabled) return;\r\n\r\n        const { ctx, width, height } = this;\r\n        ctx.strokeStyle = gridColor;\r\n        ctx.beginPath();\r\n\r\n        for (let i = 0; i < width; i += 1 << -this._scale) {\r\n            ctx.moveTo(i, 0);\r\n            ctx.lineTo(i, height - 1);\r\n        }\r\n        for (let i = 0; i < height; i += 1 << -this._scale) {\r\n            ctx.moveTo(0, i);\r\n            ctx.lineTo(width - 1, i);\r\n        }\r\n        ctx.closePath();\r\n        ctx.stroke();\r\n    }\r\n\r\n    private drawBlocks() {\r\n        const { ctx } = this;\r\n        ctx.fillStyle = aliveColor;\r\n        const drawBlock = (v: LifePoint) => {\r\n            const p = this.lifeToBitmap(v);\r\n            if (this.isValidBitmapPoint(p)) ctx.fillRect(p.x, p.y, 1 << -this._scale, 1 << -this._scale);\r\n        };\r\n        this._life.draw(this.lifeRect, drawBlock);\r\n        this.drawGrid();\r\n    }\r\n\r\n    private drawPixels() {\r\n        const { ctx, width, height } = this;\r\n        const data = ctx.getImageData(0, 0, width, height);\r\n        const rgb = hexStringToArr(aliveColor);\r\n        const drawPixel = (v: LifePoint) => {\r\n            const p = this.lifeToBitmap(v);\r\n            data.data[p.y * width * 4 + p.x * 4 + 0] = rgb[0];\r\n            data.data[p.y * width * 4 + p.x * 4 + 1] = rgb[1];\r\n            data.data[p.y * width * 4 + p.x * 4 + 2] = rgb[2];\r\n            data.data[p.y * width * 4 + p.x * 4 + 3] = 0xff;\r\n        };\r\n        this._life.draw(this.lifeRect, drawPixel);\r\n        ctx.putImageData(data, 0, 0);\r\n    }\r\n\r\n    private screenshot() {\r\n        const url = this._canvas.toDataURL('image/png').replace(/^data:image\\/[^;]/, 'data:application/octet-stream');\r\n        const downloadLink = document.createElement('a');\r\n        downloadLink.setAttribute('download', 'Life.png');\r\n        downloadLink.setAttribute('href', url);\r\n        downloadLink.click();\r\n    }\r\n\r\n    private zoomOut(v: LifePoint) {\r\n        if (this._scale < this._maxScale) {\r\n            this._corner = { x: 2 * this._corner.x - v.x, y: 2 * this._corner.y - v.y };\r\n            this._scale++;\r\n            this.drawDisplay();\r\n        }\r\n    }\r\n\r\n    private zoomIn(v: LifePoint) {\r\n        if (this._scale > this._minScale) {\r\n            this._corner = { x: Math.floor((this._corner.x + v.x) / 2), y: Math.floor((this._corner.y + v.y) / 2) };\r\n            this._scale--;\r\n            this.drawDisplay();\r\n        }\r\n    }\r\n\r\n    public get canvas() { return this._canvas; }\r\n    public get scale() { return this._scale; }\r\n    public set scale(value: number) { this._scale = value; }\r\n    public get gridScale() { return this._gridScale; }\r\n    public get corner() { return this._corner; }\r\n    public set corner(value: LifePoint) { this._corner = value; }\r\n    public get life() { return this._life; }\r\n    public get ctx() { return this._canvas.getContext('2d')!; }\r\n    public get width() { return this._canvas.width; }\r\n    public get height() { return this._canvas.height; }\r\n    public set pattern(p: Pattern) {\r\n        this._life.clear();\r\n        patterns.addPattern(this._life, { x: this._life.width / 2, y: this._life.height / 2 }, p);\r\n        this.draw();\r\n    }\r\n\r\n    public scaleUp(v: number) {\r\n        if (this._scale >= 0) return v << this._scale;\r\n        else return v >> -this._scale;\r\n    }\r\n\r\n    public scaleDown(l: number) {\r\n        if (this._scale >= 0) return l >> this._scale;\r\n        else return l << -this._scale;\r\n    }\r\n\r\n    public get lifeWidth() { return this.scaleUp(this._canvas.width); }\r\n    public get lifeHeight() { return this.scaleUp(this._canvas.height); }\r\n    public get lifeRect() { return new LifeRect(this._corner, this.lifeWidth, this.lifeHeight); }\r\n\r\n    public lifeToBitmap(v: LifePoint): Point {\r\n        return {\r\n            x: this.scaleDown(v.x - this._corner.x),\r\n            y: this.scaleDown(this._corner.y - v.y),\r\n        };\r\n    }\r\n\r\n    public bitmapToLife(p: Point): LifePoint {\r\n        return {\r\n            x: this._corner.x + this.scaleUp(p.x),\r\n            y: this._corner.y - this.scaleUp(p.y),\r\n        };\r\n    }\r\n\r\n    public get gridEnabled() { return this._scale <= this._gridScale; }\r\n\r\n    public isValidBitmapPoint(p: Point) {\r\n        return 0 <= p.x && p.x < this._canvas.width && 0 <= p.y && p.y < this._canvas.height;\r\n    }\r\n}","// TODO: Pull in the canvas stuff, but right now it's so tied to the LifeView class\r\n// that I'm too lazy to separate it\r\nexport default abstract class Game {\r\n    private readonly _targetFPS: number;\r\n    private readonly _limitTick: boolean;\r\n    private _lastRenderTime = 0;\r\n    private _lastTickTime = 0;\r\n\r\n    protected constructor(targetFPS: number, limitTick = false) {\r\n        this._targetFPS = targetFPS;\r\n        this._limitTick = limitTick;\r\n    }\r\n\r\n    protected abstract render(deltaRenderTime: number): void;\r\n    protected abstract tick(deltaTickTime: number): void;\r\n\r\n    private loop(time: number) {\r\n        const deltaRenderTime = time - this._lastRenderTime;\r\n        const deltaTickTime = time - this._lastTickTime;\r\n        if (!this._limitTick) {\r\n            this.tick(deltaTickTime);\r\n            this._lastTickTime = time;\r\n        }\r\n        if (deltaRenderTime >= 1000 / this._targetFPS) {\r\n            if (this._limitTick) {\r\n                this.tick(deltaTickTime);\r\n                this._lastTickTime = time;\r\n            }\r\n            this.render(deltaRenderTime);\r\n            this._lastRenderTime = time;\r\n        }\r\n        if (this._doLoop) window.requestAnimationFrame(this.loop.bind(this));\r\n    }\r\n\r\n    private _doLoop = false;\r\n    public get running() { return this._doLoop; }\r\n\r\n    public start() {\r\n        this._doLoop = true;\r\n        window.requestAnimationFrame(this.loop.bind(this));\r\n    }\r\n\r\n    public stop() {\r\n        this._doLoop = false;\r\n    }\r\n}","import React from 'react';\r\nimport { FaPlay, FaPause } from 'react-icons/fa';\r\nimport LifeView from './Life/LifeView';\r\nimport * as patterns from './Life/Patterns';\r\n\r\nimport './LifeComponent.css';\r\n\r\ninterface LifeComponentState {\r\n    lifeData?: LifeView;\r\n    selectedPattern: string;\r\n}\r\n\r\n// https://github.com/ericlippert/ConwaysLife/tree/episode11\r\n// https://ericlippert.com/2020/06/15/life-part-15/\r\nexport class LifeComponent extends React.Component<{}, LifeComponentState> {\r\n\r\n    public constructor(props: {}) {\r\n        super(props);\r\n\r\n        this.state = { selectedPattern: 'puffer2' };\r\n    }\r\n\r\n    private onPatternChange(ev: React.ChangeEvent<HTMLSelectElement>) {\r\n        if (!this.state.lifeData) return;\r\n\r\n        if (this.state.lifeData.running) this.state.lifeData.stop();\r\n        this.state.lifeData.pattern = patterns.allPatterns[ev.target.value];\r\n\r\n        this.setState({ selectedPattern: ev.target.value });\r\n    }\r\n\r\n    private onToggleRunning() {\r\n        if (!this.state.lifeData) return;\r\n        if (this.state.lifeData.running) this.state.lifeData.stop();\r\n        else this.state.lifeData.start();\r\n    }\r\n\r\n    public componentDidMount() {\r\n        const lifeData = new LifeView('lifeCanvas');\r\n        this.setState({ lifeData });\r\n    }\r\n\r\n    public componentWillUnmount() {\r\n        this.state.lifeData?.stop();\r\n    }\r\n\r\n    public render() {\r\n        return (\r\n            <div className=\"Life\">\r\n                <canvas className=\"LifeCanvas\" id=\"lifeCanvas\" />\r\n                <div className=\"LifeControls\">\r\n                    <select value={this.state.selectedPattern} onChange={this.onPatternChange.bind(this)}>\r\n                        {Object.keys(patterns.allPatterns).map(key => (\r\n                            <option key={key} value={key}>{key}</option>\r\n                        ))}\r\n                    </select>\r\n                    <button onClick={this.onToggleRunning.bind(this)}><FaPlay /><FaPause /></button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport { LifeComponent } from './LifeComponent';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <LifeComponent />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}